# Test Center - Compliance Testing Application
# Copyright (C) 2012 - 2013 Paulo Ferreira <pf at sourcenotes.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

##
# Default Form Model (Metadata Extension)
##

forms:
  default:
    default:
      # Specifies the Parent Form, in the inheritance hierarchy, for this form
      #
      # (OPTIONAL)
      #
      # Elements:
      # - TEXT: form_id
      inherit: ~
      # Specifies the Type of Form
      #
      # (OPTIONAL)
      #
      # Elements:
      # - TEXT: ONE OF(standard, tab)
      type: standard
      # Title for the Form
      #
      # (REQUIRED)
      #
      # Elements:
      # - TEXT
      title: 'Title'
      # Specifies the Fields that will be used to build the Form (in the order
      # and, optionally, grouping to be used)
      #
      # (REQUIRED)
      #
      # Elements: (One Of)
      # - TEXT: field_id              - A Single Field Form
      # - ARRAY(TEXT: field_id, ....) - A Form with no Grouping)
      # - MAP(group-label -> One Of
      #   - TEXT: field_id              - A Single Field in the Group
      #   - ARRAY(TEXT: field_id, ....) - Multiple Fields in the Group
      #   )
      fields: ~
      # Associates a Recognized Meta Form, Service Alias, with a specific
      # Service Meta Entry 
      #
      # (REQUIRED if: The form is not a static form, i.e. requires any sort
      #  of serialization)
      #
      # Elements:
      #   MAP: ( service_alias -> (SERVICE META) service_id)
      #   Recognized Aliases: One of (create, read, update, delete)
      services: ~
      # Form Specific Validations 
      #
      # (OPTIONAL: MAP)
      #
      # Elements:
      #   fields : Per Field validations, which are applied/run when the fields
      #            value is modified
      #            (OPTIONAL: MAP of field_id -> TEXT: validation EL)
      #   form   : Global Form Validations, which are tested only when the form
      #            is validate before submission
      #            (OPTIONAL: 
      #             POSSIBLE VALUES (one Of): 
      #             - TEXT: validation EL
      #             - ARRAY: (TEXT: validation EL, ...)
      #            )
      validations: ~
      # Form Specific Transformations 
      #
      # (OPTIONAL: MAP)
      #
      # Elements:
      #   fields : Per Field transformations, which are applied/run when any of the
      #            dependencies are applied
      #            (OPTIONAL: MAP: (field_id -> TEXT: transformation EL, ...)
      #   form   : Global Form Transformations, which are applied before the form
      #            is validate
      #            (OPTIONAL: MAP: (field_id -> TEXT: transformation EL, ...)
      transformations: ~
    tabbed:
      # Specifies the Parent Form, in the inheritance hierarchy, for this form
      inherit: default
      # Specifies the Type of Form
      type: tab
      # Specifies the Fields that will be used to build the Form (in the order
      # and, optionally, grouping to be used)
      #
      # (REQUIRED)
      #
      # Elements: (One Of)
      # - TEXT: form_id                     - A Tab, Containing the Specified Form (Using the Form Title as the Tab Title)
      # - ARRAY(One Of
      #   - TEXT: form_id                   - Form, using the Tab Tile as the Form Title
      #   - MAP(form_id -> TEXT (Tab Name)) - Form, using the Text as the Tab Title
      #   )
      tabs: ~
    twolists:
      # Specifies the Parent Form, in the inheritance hierarchy, for this form
      inherit: default
      # Specifies the Type of Form
      type: twolists
      # Source and Destination Lists for Forms
      #
      # (REQUIRED: MAP)
      #
      # Elements: 
      #   source      : (REQUIRED: TEXT) 
      #   destination : (REQUIRED: TEXT)
      lists:
        # Source List Definition
        #
        # (REQUIRED: TEXT)
        #
        # Elements: 
        #   list_id : ID for List Definition
        source: ~
        # Destination List Definition
        #
        # (REQUIRED: TEXT)
        #
        # Elements: 
        #   list_id : ID for List Definition
        destination: ~
      # Options
      #
      # (OPTIONAL: MAP)
      options:
        # Entries are sequenced (have a specific order, that has to be maintained)
        #
        # (REQUIRED: BOOLEAN)
        sequence: false
        # Each Entry in the Destination can Correspond to Only One Entry in the
        # the Source List
        #
        # (REQUIRED: BOOLEAN)
        onlyone: true
        
